model User {
    userId           String              @id @default(uuid())
    googleId         String?             @unique
    githubId         String?             @unique
    username         String              @unique
    email            String              @unique
    password         String
    avatarUrl        String?
    bio              String?
    chats            UserChat[]
    messages         Message[]           @relation("UserSentMessages")
    followers        Connection[]        @relation("UserFollowers")
    following        Connection[]        @relation("UserFollowings")
    sentRequests     ConnectionRequest[] @relation("SenderRequest")
    receivedRequests ConnectionRequest[] @relation("ReceiverRequest")
    createdAt        DateTime            @default(now())
    updatedAt        DateTime            @updatedAt

    @@index([username])
}

model verificationCode {
    id        String   @id @default(uuid())
    email     String   @unique
    code      String
    createdAt DateTime @default(now())
    expiresAt DateTime

    @@index([expiresAt])
}

model Connection {
    id          String   @id @default(uuid())
    followerId  String
    follower    User     @relation("UserFollowings", fields: [followerId], references: [userId])
    followingId String
    following   User     @relation("UserFollowers", fields: [followingId], references: [userId])
    createdAt   DateTime @default(now())

    @@unique([followerId, followingId])
}

enum RequestStatus {
    pending
    accepted
    rejected
}

model ConnectionRequest {
    requestId  String        @id @default(uuid())
    senderId   String
    sender     User          @relation("SenderRequest", fields: [senderId], references: [userId])
    receiverId String
    receiver   User          @relation("ReceiverRequest", fields: [receiverId], references: [userId])
    status     RequestStatus @default(pending)
    createdAt  DateTime      @default(now())

    @@unique([senderId, receiverId])
}
